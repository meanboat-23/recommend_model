# -*- coding: utf-8 -*-
"""Untitled41.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uSRHmwlcKWtOW-TCUU5QNE6s3oRCx_Sp
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import pickle

def find_clustering_index(df = '', click_item = ''):
  return df['cluster'][df[df['Name'] == click_item].index[0]]

def make_score_by_rank(rec_box, cluster_unique):
  ts_list = {}
  score = 15
  for item in rec_box:
    if item[0] in cluster_unique:
      ts_list[item[0]] = score
      score -= 1
  return ts_list

def make_ts_list_in_TS(sampled_theta, cluster_unique):
    rec_box = []
    for i in range(len(sampled_theta)):
        rec_box.append((i, sampled_theta[i]))
    rec_box.sort(key=lambda x: x[1], reverse=True)
    ts_list = make_score_by_rank(rec_box, cluster_unique)

    return ts_list

def make_cluster_unique(df):
    cluster_unique = list(df.cluster.unique())

    if 'Nan' in cluster_unique:
        del cluster_unique[cluster_unique.index('Nan')]
    cluster_unique = [int(i) for i in cluster_unique]

    return cluster_unique

class ThompsonSampling:
    def __init__(self, num_items):
        self.num_items = num_items
        self.alpha = np.ones(num_items)
        self.beta = np.ones(num_items)

    def recommend(self):
        sampled_theta = np.random.beta(self.alpha, self.beta)
        recommended_item = np.argmax(sampled_theta)
        return recommended_item, sampled_theta

    def update(self, item, reward):
        if reward == 1:
            self.alpha[item] += 1
        else:
            self.beta[item] += 1

def Thompson_Sampling(user_id = '', click_item = '', reco = '', total_Osakak_df = '', user_model_path = ''):
    df = pd.read_csv(total_Osakak_df)
    cluster_unique = make_cluster_unique(df)

    with open(user_model_path, 'rb') as file:
        user_models = pickle.load(file)

    if reco == 1:
        if user_id not in user_models:
            print('해당하는 유저의 정보가 없습니다!')
            return 'Nan'
        recommender = user_models[user_id]
        recommended_item, sampled_theta = recommender.recommend()
        ts_list = make_ts_list_in_TS(sampled_theta, cluster_unique)
        print("추천된 항목: ", recommended_item)

        return ts_list

    else:
        click_item = int(find_clustering_index(df, click_item))
        if user_id not in user_models:
            user_models[user_id] = ThompsonSampling(len(df.cluster.unique()))
        recommender = user_models[user_id]
        recommended_item, _ = recommender.recommend()
        reward = int(click_item == recommended_item)
        recommender.update(recommended_item, reward)
        print("모델이 갱신되었습니다.")

        with open('TS_user_models.p', 'wb') as file:
            pickle.dump(user_models, file)

        return 'Nan'


